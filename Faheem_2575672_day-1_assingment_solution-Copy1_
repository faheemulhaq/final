{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3dde1f86",
   "metadata": {},
   "source": [
    "# problem statement - 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "776dacc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "lst = [123,'apple'] # TO add new elements to the end of the list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ecd2536f",
   "metadata": {},
   "outputs": [],
   "source": [
    "lst.append(234)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c0de32a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[123, 'apple', 234, 234, 234, 234]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1a94adc2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[123, 'apple', 234, 234, 234, 234]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4921d032",
   "metadata": {},
   "outputs": [],
   "source": [
    "lst.extend([11,22,33]) # to display the same list of elements multilpe time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "77c63ed3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After added - list element are: \\nn [123, 'apple', 234, 234, 234, 234, 11, 22, 33]\n"
     ]
    }
   ],
   "source": [
    "print('After added - list element are: \\\\nn',lst)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "cf59f766",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The concardination of the both list is : \n",
      "\n",
      " [33, 22, 11, 234, 234, 234, 234, 'apple', 123, 54, 67, 87, 90]\n"
     ]
    }
   ],
   "source": [
    "lst2 = [54,67,87,90]\n",
    "lst\n",
    "ele = lst + lst2\n",
    "print('The concardination of the both list is : \\n\\n',all)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "1260f1d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The reverse value of the ele: \n",
      "\n",
      " [90, 87, 67, 54, 123, 'apple', 234, 234, 234, 234, 11, 22, 33]\n"
     ]
    }
   ],
   "source": [
    "ele.reverse()\n",
    "print('The reverse value of the ele: \\n\\n',ele)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c79a2992",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3, 4, 5)\n"
     ]
    }
   ],
   "source": [
    "tuple1 = (1,2,3,4) # adding new element \n",
    "new_element = 5\n",
    "tuple = tuple1 + (new_element,)\n",
    "print(tuple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "27fd07bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5, 4, 3, 2, 1)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#To reverse element in the list\n",
    "tuple[::-1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "335edc59",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3)\n",
      "(1, 2, 3)\n",
      "(1, 2, 3)\n",
      "(1, 2, 3, 1, 2, 3, 1, 2, 3)\n"
     ]
    }
   ],
   "source": [
    "tuple = (1, 2, 3)\n",
    "times_to_display = 3\n",
    "for _ in range(times_to_display): print(tuple)\n",
    "    \n",
    "repeated_tuple = tuple * times_to_display\n",
    "print(repeated_tuple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "a49ab9e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3, 4, 5, 6)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "tuple1 = (1, 2, 3)\n",
    "tuple2 = (4, 5, 6)\n",
    "tuple = tuple1 + tuple2\n",
    "print(tuple)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "15046370",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 2, 3, 4, 5, 6)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tuple"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "e6033b69",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'tuple' object is not callable",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[52], line 5\u001b[0m\n\u001b[0;32m      2\u001b[0m original_tuple \u001b[38;5;241m=\u001b[39m (\u001b[38;5;241m3\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m4\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m5\u001b[39m, \u001b[38;5;241m9\u001b[39m, \u001b[38;5;241m2\u001b[39m, \u001b[38;5;241m6\u001b[39m, \u001b[38;5;241m5\u001b[39m, \u001b[38;5;241m3\u001b[39m, \u001b[38;5;241m5\u001b[39m)\n\u001b[0;32m      4\u001b[0m \u001b[38;5;66;03m# Sort the elements in ascending order and create a new sorted tuple\u001b[39;00m\n\u001b[1;32m----> 5\u001b[0m sorted_tuple \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mtuple\u001b[39m(\u001b[38;5;28msorted\u001b[39m(original_tuple))\n\u001b[0;32m      7\u001b[0m \u001b[38;5;28mprint\u001b[39m(sorted_tuple)\n",
      "\u001b[1;31mTypeError\u001b[0m: 'tuple' object is not callable"
     ]
    }
   ],
   "source": [
    "tuple.sort\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "95f8fad0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create a list with integer(mim = 10)\n",
    "lst = [1,2,3,4,5,6,7,8,9,10]\n",
    "#display the last number in the list \n",
    "lst[-1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "39de4342",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4, 5, 6]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#command for display the value from the list[0:4]\n",
    "lst[0:4]\n",
    "#command for display the value form the list[2:]\n",
    "lst[2:]\n",
    "#command for display the value form the list[:6]\n",
    "lst[:6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "fb9cb52f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The length of the tuple is: 5\n"
     ]
    }
   ],
   "source": [
    "#4.To display the element 10 to 50 from tuple1\n",
    "tuple1 = (10,50,20,40,30)\n",
    "tuple1[:2]\n",
    "\n",
    "\n",
    "length = len(my_tuple)\n",
    "\n",
    "print(\"The length of the tuple is:\", length)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "eea3e0ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The minimum value of the tuple is:  10\n"
     ]
    }
   ],
   "source": [
    "minimum = min(tuple1)\n",
    "print(\"The minimum value of the tuple is: \",minimum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "c0d1b6d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the addition of the total value of the tuple is :  150\n"
     ]
    }
   ],
   "source": [
    "#sum of all the element in the tuple\n",
    "total = sum(tuple)\n",
    "print(\"the addition of the total value of the tuple is : \",addition )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "831c611b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10, 50, 20, 40, 30)\n",
      "(10, 50, 20, 40, 30)\n",
      "(10, 50, 20, 40, 30)\n"
     ]
    }
   ],
   "source": [
    "#To display the same tuple1 multiple time\n",
    "tuple = (10,50,20,40,30)\n",
    "times_to_display = 3\n",
    "# Using a loop to display the tuple multiple times\n",
    "for _ in range(times_to_display):\n",
    "    print(tuple)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "d39ad2f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the lenght of the string is :  23\n",
      "akal ak ahs moohb moohb\n",
      "bhoom bhoom sha ka laka\n",
      "bhoom bhoom sha ka laka\n",
      "bhoom bhoom sha ka laka\n",
      "hello world my name is gulu dada\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'India'"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#5.to calculate the lenght of the string\n",
    "str = (\"bhoom bhoom sha ka laka\")\n",
    "lenght = len(str)\n",
    "print (\"the lenght of the string is : \",lenght)\n",
    "#reverse words in a string\n",
    "reversed_word = str[::-1]\n",
    "print(reversed_word)\n",
    "#reverse the word multiple time\n",
    "time_to_display = 3\n",
    "for _ in range(times_to_display):\n",
    "    print(str)\n",
    "#concatenate two string\n",
    "str1 = (\"hello world\")\n",
    "str2 = (\"my name is gulu dada\")\n",
    "str = str1 + \" \" + str2 \n",
    "print(str)\n",
    "#str1 = \"South India\",using string slicing to display \"india\"\n",
    "str1 = (\"South India\")\n",
    "str1[-5:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "edddaaed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['name', 'age', 'city']\n",
      "name\n",
      "age\n",
      "city\n"
     ]
    }
   ],
   "source": [
    "#6.creating the dictionary\n",
    "my_dict = {'name': 'John', 'age': 30, 'city': 'New York'}\n",
    "\n",
    "# Access keys using the keys() method and convert to a list\n",
    "keys_list = list(my_dict.keys())\n",
    "print(keys_list)  # Output: ['name', 'age', 'city']\n",
    "\n",
    "# Access keys using a for loop\n",
    "for key in my_dict.keys():\n",
    "    print(key)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "68672847",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['John', 30, 'New York']\n",
      "John\n",
      "30\n",
      "New York\n"
     ]
    }
   ],
   "source": [
    "my_dict = {'name': 'John', 'age': 30, 'city': 'New York'}\n",
    "\n",
    "# Access values using the values() method and convert to a list\n",
    "values_list = list(my_dict.values())\n",
    "print(values_list)  # Output: ['John', 30, 'New York']\n",
    "\n",
    "# Access values using a for loop\n",
    "for value in my_dict.values():\n",
    "    print(value)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "89a1dfa9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'name': 'John', 'age': 31, 'city': 'New York'}\n"
     ]
    }
   ],
   "source": [
    "# Original dictionary\n",
    "my_dict = {'name': 'John', 'age': 30}\n",
    "\n",
    "# Update the dictionary using the update() method\n",
    "my_dict.update({'city': 'New York', 'age': 31})\n",
    "\n",
    "print(my_dict)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aeaa7472",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Python program to insert a number to any postion in a list.\n",
    "\n",
    "my_list = [1, 2, 3, 4, 5,6]\n",
    "number_to_insert = 10\n",
    "insert_position = 2\n",
    "if insert_position >= 0 and insert_position <= len(my_list):\n",
    "    \n",
    "    my_list.insert(insert_position, number_to_insert)\n",
    "    print(\"Updated list:\", my_list)\n",
    "else:\n",
    "    print(\"Invalid insert position\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adca9bd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n",
    "\n",
    "x = 8\n",
    "\n",
    "if 0 <= x < len(my_list):\n",
    "    my_list = my_list[:x] + my_list[x + 1:]\n",
    "    print(\"update list : \", my_list)\n",
    "else:\n",
    "   print(\"Invalid index\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ed7b60f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write a program to display a number from 1 to 100\n",
    " for number in range(1,101):\n",
    "        print(number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c9146117",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4fb55c9f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fd5e784",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88eade1a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

